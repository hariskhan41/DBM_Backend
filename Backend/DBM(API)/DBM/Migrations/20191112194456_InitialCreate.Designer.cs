// <auto-generated />
using System;
using DBM.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DBM.Migrations
{
    [DbContext(typeof(DBMContext))]
    [Migration("20191112194456_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DBM.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("DBM.Models.AssignmentSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignmentFilePath")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("AssignmentId");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SubmissionTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentSubmission");
                });

            modelBuilder.Entity("DBM.Models.Assignments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SubmissionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("DBM.Models.CourseContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedBy");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("CourseId");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("CourseId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CourseContent");
                });

            modelBuilder.Entity("DBM.Models.Courses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("TeacherId");

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InstituteId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DBM.Models.GroupsAssignedPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId");

                    b.Property<int>("UserGroupId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("GroupsAssignedPermissions");
                });

            modelBuilder.Entity("DBM.Models.Institute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Institute");
                });

            modelBuilder.Entity("DBM.Models.Lectures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<string>("LectureFilePath")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("Tite");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("DBM.Models.LoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status");

                    b.Property<DateTime>("StatusChangedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("LoginHistory");
                });

            modelBuilder.Entity("DBM.Models.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("UpdatedBy");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("DBM.Models.PermissionLookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name");

                    b.HasKey("Id");

                    b.ToTable("PermissionLookup");
                });

            modelBuilder.Entity("DBM.Models.UserAssignedGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserGroupId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAssignedGroups");
                });

            modelBuilder.Entity("DBM.Models.UserGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstituteId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("DBM.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActiveStatue");

                    b.Property<string>("Cnic")
                        .IsRequired()
                        .HasColumnName("CNIC")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("InstituteId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int>("LoginStatus");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("InstituteId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DBM.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("DBM.Models.Announcement", b =>
                {
                    b.HasOne("DBM.Models.Courses", "Course")
                        .WithMany("Announcement")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Announcem__Cours__2C3393D0");

                    b.HasOne("DBM.Models.Users", "CreatedByNavigation")
                        .WithMany("AnnouncementCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Announcem__Creat__2A4B4B5E");

                    b.HasOne("DBM.Models.Users", "UpdatedByNavigation")
                        .WithMany("AnnouncementUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Announcem__Updat__2B3F6F97");
                });

            modelBuilder.Entity("DBM.Models.AssignmentSubmission", b =>
                {
                    b.HasOne("DBM.Models.Assignments", "Assignment")
                        .WithMany("AssignmentSubmission")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("FK__Assignmen__Assig__3D5E1FD2");
                });

            modelBuilder.Entity("DBM.Models.Assignments", b =>
                {
                    b.HasOne("DBM.Models.Courses", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Assignmen__Cours__3A81B327");

                    b.HasOne("DBM.Models.Users", "CreatedByNavigation")
                        .WithMany("AssignmentsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Assignmen__Creat__38996AB5");

                    b.HasOne("DBM.Models.Users", "UpdatedByNavigation")
                        .WithMany("AssignmentsUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Assignmen__Updat__398D8EEE");
                });

            modelBuilder.Entity("DBM.Models.CourseContent", b =>
                {
                    b.HasOne("DBM.Models.Users", "AddedByNavigation")
                        .WithMany("CourseContentAddedByNavigation")
                        .HasForeignKey("AddedBy")
                        .HasConstraintName("FK__CourseCon__Added__2F10007B");

                    b.HasOne("DBM.Models.Courses", "Course")
                        .WithMany("CourseContent")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__CourseCon__Cours__30F848ED");

                    b.HasOne("DBM.Models.Users", "UpdatedByNavigation")
                        .WithMany("CourseContentUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__CourseCon__Updat__300424B4");
                });

            modelBuilder.Entity("DBM.Models.Courses", b =>
                {
                    b.HasOne("DBM.Models.Users", "CreatedByNavigation")
                        .WithMany("CoursesCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Courses__Created__239E4DCF");

                    b.HasOne("DBM.Models.Institute", "Institute")
                        .WithMany("Courses")
                        .HasForeignKey("InstituteId")
                        .HasConstraintName("FK__Courses__Institu__21B6055D");

                    b.HasOne("DBM.Models.Users", "Teacher")
                        .WithMany("CoursesTeacher")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK__Courses__Teacher__22AA2996");

                    b.HasOne("DBM.Models.Users", "UpdatedByNavigation")
                        .WithMany("CoursesUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Courses__Updated__24927208");
                });

            modelBuilder.Entity("DBM.Models.GroupsAssignedPermissions", b =>
                {
                    b.HasOne("DBM.Models.PermissionLookup", "Permission")
                        .WithMany("GroupsAssignedPermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK__GroupsAss__Permi__182C9B23");

                    b.HasOne("DBM.Models.UserGroups", "UserGroup")
                        .WithMany("GroupsAssignedPermissions")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("FK__GroupsAss__UserG__173876EA");
                });

            modelBuilder.Entity("DBM.Models.Lectures", b =>
                {
                    b.HasOne("DBM.Models.Courses", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Lectures__Course__276EDEB3");
                });

            modelBuilder.Entity("DBM.Models.Notes", b =>
                {
                    b.HasOne("DBM.Models.Courses", "Course")
                        .WithMany("Notes")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__Notes__CourseId__35BCFE0A");

                    b.HasOne("DBM.Models.Users", "CreatedByNavigation")
                        .WithMany("NotesCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Notes__CreatedBy__33D4B598");

                    b.HasOne("DBM.Models.Users", "UpdatedByNavigation")
                        .WithMany("NotesUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Notes__UpdatedBy__34C8D9D1");
                });

            modelBuilder.Entity("DBM.Models.UserAssignedGroups", b =>
                {
                    b.HasOne("DBM.Models.UserGroups", "UserGroup")
                        .WithMany("UserAssignedGroups")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("FK__UserAssig__UserG__1ED998B2");

                    b.HasOne("DBM.Models.Users", "User")
                        .WithMany("UserAssignedGroups")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserAssig__UserI__1DE57479");
                });

            modelBuilder.Entity("DBM.Models.UserGroups", b =>
                {
                    b.HasOne("DBM.Models.Institute", "Institute")
                        .WithMany("UserGroups")
                        .HasForeignKey("InstituteId")
                        .HasConstraintName("FK__UserGroup__Insti__1273C1CD");
                });

            modelBuilder.Entity("DBM.Models.Users", b =>
                {
                    b.HasOne("DBM.Models.Institute", "Institute")
                        .WithMany("Users")
                        .HasForeignKey("InstituteId")
                        .HasConstraintName("FK__Users__Institute__1B0907CE");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
